{"version":3,"sources":["components/Buttons/BtnSolid/BtnSolid.js","scenes/Login/Login.js","scenes/Profile/Profile.js","core/Constants.js","scenes/Home/Home.js","scenes/Home/services/Services.js","components/PageNotFound/PageNotFound.js","App.js","serviceWorker.js","index.js"],"names":["BtnSolid","props","react_default","a","createElement","className","style","customStyle","onClick","e","preventDefault","target","blur","disabled","isDisabled","tabIndex","icon","title","defaultProps","height","width","Login","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onGoogleLoginClicked","window","location","Buttons_BtnSolid_BtnSolid","marginTop","Component","Profile","Constants","DEV_MODE","REACT_KEY","ICONS","MODAL_ROUTES","ROUTE","REACT_ROUTES","HOME","PROFILE","LOGIN","GET_FEEDS_LIST","PAGE_IDENTIFIERS","LOADING","ERROR_PAGE","KEY_CODE","ENTER","ARROW_UP","ARROW_DOWN","ESC","PERIOD","REQUEST_STATS","PENDING","SUCCESS","FAILURE","REQ_TIMEOUT","Home","onSuccess","onFailure","data","console","log","feeds_list","axios","timeout","method","url","params","then","res","auth","user_login_done","catch","error","NotFound","href","App","Switch","Route","exact","path","component","Boolean","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c94a7f7.chunk.js","sourcesContent":["\n/*** Imports ***/\n\n/* Library imports */\nimport React from \"react\";\nimport PropTypes from 'prop-types';\n\n/* Style imports */\nimport \"./styles.css\"\n\n/*** End Imports ***/\n\nconst BtnSolid = (props) => {\n\n    const onClick = (e) => {\n        e.preventDefault();\n        e.target.blur();\n        props.onClick();\n    };\n\n    return (\n        <button\n            className=\"btn-solid\"\n            style={props.customStyle}\n            onClick={onClick}\n            disabled={props.isDisabled}\n            tabIndex={props.tabIndex}\n        >\n            {props.icon}\n            {props.title}\n        </button>\n    );\n};\n\nBtnSolid.propTypes = {\n    title: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired,\n    icon : PropTypes.element,\n    customStyle : PropTypes.object,\n    isDisabled: PropTypes.bool\n};\nBtnSolid.defaultProps ={\n  customStyle : {\n      height : '100%',\n      width : '100%'\n  },\n    isDisabled : false\n};\n\nexport default BtnSolid;","/*** Imports ***/\r\n\r\n/* Library imports */\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport BtnSolid from \"../../components/Buttons/BtnSolid/BtnSolid\";\r\n\r\n/* Component imports */\r\n\r\n/* Style imports */\r\nimport './styles.css';\r\n\r\n/*** End Imports ***/\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentWillMount() {}\r\n  componentDidMount() {}\r\n\r\n  // Server calls\r\n\r\n  // helper function\r\n\r\n  // listeners\r\n  onGoogleLoginClicked =() =>{\r\n    window.location = \"/auth/google\"\r\n  }\r\n  // views to be rendered\r\n\r\n  //finally render\r\n  render() {\r\n    return (\r\n      <div className=\"login-page-container\">\r\n        Login to WHITE PANDA\r\n        <BtnSolid \r\n          onClick = {this.onGoogleLoginClicked}\r\n          title = {\"Login with GOOGLE\"}\r\n          customStyle = {\r\n            {\r\n              height : 'auto',\r\n              width : '200px',\r\n              marginTop: '20px'\r\n            }\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * all prop types which can be passed to this component\r\n */\r\nLogin.propTypes = {};\r\n\r\n/**\r\n * Only if default initialization is required\r\n * Default props value for this component\r\n */\r\nLogin.defaultProps = {};\r\n\r\nexport default Login;\r\n","\r\n/*** Imports ***/\r\n\r\n/* Library imports */\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n/* Component imports */\r\n\r\n/* Style imports */\r\n\r\n/*** End Imports ***/\r\n\r\nclass Profile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentWillMount() {\r\n\r\n  }\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  // Server calls\r\n\r\n  // helper function\r\n\r\n  // listeners\r\n\r\n  // views to be rendered\r\n\r\n\r\n\r\n  //finally render\r\n  render() {\r\n    return;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * all prop types which can be passed to this component\r\n */\r\nProfile.propTypes = {\r\n\r\n};\r\n\r\n/**\r\n * Only if default initialization is required\r\n * Default props value for this component\r\n */\r\nProfile.defaultProps = {\r\n\r\n};\r\n\r\nexport default Profile;","import Content from \"./Content\";\r\n\r\nconst Constants = {\r\n  DEV_MODE: false,\r\n  REACT_KEY: 1,\r\n\r\n  ICONS: {\r\n\r\n  },\r\n  MODAL_ROUTES: {\r\n\r\n  },\r\n  ROUTE: {\r\n    REACT_ROUTES: {\r\n      HOME: \"/\",\r\n      PROFILE: \"/profile\",\r\n      LOGIN: \"/login\",\r\n    },\r\n    GET_FEEDS_LIST: \"/getfeedslist\",\r\n  },\r\n\r\n  PAGE_IDENTIFIERS: {\r\n    LOADING: \"loading\",\r\n    HOME: \"home-page\",\r\n    PROFILE: \"profile-page\",\r\n    ERROR_PAGE: \"errorpage\",\r\n  },\r\n  KEY_CODE: {\r\n    ENTER: 13,\r\n    ARROW_UP: 30,\r\n    ARROW_DOWN: 40,\r\n    ESC: 27,\r\n    PERIOD: 46\r\n  },\r\n  //Making server calls  1. show loading image    2. show data view   3. show failure view\r\n  REQUEST_STATS: {\r\n    PENDING: 1,\r\n    SUCCESS: 2,\r\n    FAILURE: 3\r\n  },\r\n  REQ_TIMEOUT: 15 * 60 * 1000\r\n};\r\n\r\nexport default Constants;","\r\n/*** Imports ***/\r\n\r\n/* Library imports */\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n/* Component imports */\r\nimport {xhrGetFeedsList} from './services/Services'\r\n/* Style imports */\r\n\r\n/*** End Imports ***/\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentWillMount() {\r\n\r\n  }\r\n  componentDidMount() {\r\n    xhrGetFeedsList({}, (data)=>{\r\n      console.log(data.feeds_list)\r\n    },()=>{\r\n\r\n    })\r\n  }\r\n\r\n  // Server calls\r\n\r\n  // helper function\r\n\r\n  // listeners\r\n\r\n  // views to be rendered\r\n\r\n\r\n\r\n  //finally render\r\n  render() {\r\n    return (\r\n      <div>\r\n        This is Home Page\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * all prop types which can be passed to this component\r\n */\r\nHome.propTypes = {\r\n\r\n};\r\n\r\n/**\r\n * Only if default initialization is required\r\n * Default props value for this component\r\n */\r\nHome.defaultProps = {\r\n\r\n};\r\n\r\nexport default Home;","import axios from \"axios\";\r\nimport Constants from \"./../../../core/Constants\";\r\n\r\nexport function xhrGetFeedsList (parms, onSuccess, onFailure) {\r\n    if(Constants.DEV_MODE){\r\n        requestDummyType1(parms);\r\n        return;\r\n    }\r\n    axios({\r\n        timeout: Constants.REQ_TIMEOUT,\r\n        method: 'get',\r\n        url: Constants.ROUTE.GET_FEEDS_LIST,\r\n        params: {\r\n        //key value pair\r\n        }\r\n    }).then( res =>{\r\n        let data = res.data ;\r\n\r\n        //Some initial processing like Valid User Check\r\n        //finally call success as server call was success handle other cases in callback function\r\n        if(data.auth && !data.auth.user_login_done){\r\n          window.location = Constants.ROUTE.REACT_ROUTES.LOGIN\r\n        }\r\n        onSuccess(data);\r\n    }).catch((error)=>{\r\n        onFailure();\r\n    });\r\n}\r\n\r\n\r\n/* BELOW CODE FOR DEV, Comment for Production */\r\n\r\nfunction requestDummyType1 (params) {\r\n    return null ;\r\n}\r\n","import React , {Component} from 'react';\r\nimport './styles.css';\r\nclass NotFound extends Component{\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"container_background\">\r\n                <div className=\"inner_container\">\r\n                    <div className=\"container_404\">\r\n                        <div className=\"char_4\">4</div>\r\n                        <div className=\"oval_main\">\r\n                            <div className=\"oval_inner\">\r\n                            <div className=\"oval-1\"/>\r\n                            <div className=\"oval-2\"/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"char_4\">4</div>\r\n                    </div>\r\n                    <div className=\"page-not-found\">Page not found</div>\r\n                    <a href = '/'>\r\n                        <button className=\"btn_browse\">Go to Home</button>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NotFound;","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport './App.css';\nimport Login from './scenes/Login/Login';\nimport Profile from './scenes/Profile/Profile';\nimport Home from './scenes/Home/Home';\nimport NotFound from './components/PageNotFound/PageNotFound';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Switch>\n        <Route exact path='/login' component={Login} />\n        <Route exact path='/profile/:id' component={Profile} />\n        <Route exact path='/' component={Home} />\n        <Route path='*' component={NotFound} />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}